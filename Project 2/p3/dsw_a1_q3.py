# -*- coding: utf-8 -*-
"""DSW_A1_Q3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xncjo2lOnziaadBP1_1GbqKccEaQ7G5w

# Q3
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import DBSCAN

book_data = pd.read_csv('/content/prog_book.csv')
print("Number of null records in the reviews column:", book_data['Reviews'].isnull().sum())
book_data['Reviews'] = book_data.Reviews.str.replace(',', '').astype(float)
book_data['Reviews'].describe()

"""## Task 1"""

univariate_outlier_features = ['Rating', 'Reviews', 'Number_Of_Pages', 'Price']
colors = ['blue', 'green', 'yellow', 'red']

for i, feature in enumerate(univariate_outlier_features):
  plt.figure(figsize=(15,8))
  ax = sns.boxplot(book_data[feature], color=colors[i], linewidth=2.5, fliersize=8, orient='h')
  ax.set_title(f'Box plot for {feature}')
  ax.set_xlabel(f'{feature}')
  outliers = plt.scatter([],[], marker="d", color="gray", s=30, label="Outliers")
  plt.legend(handles=[outliers])
  plt.tight_layout()
  plt.show()

"""## Task 2"""

print("Categories in the Type column:", book_data['Type'].unique())
book_data['Type_Numeric'] = book_data['Type'].astype('category').cat.codes

features = ['Rating', 'Reviews', 'Number_Of_Pages', 'Type_Numeric', 'Price']
dbscan_data = book_data[features]
data_scaled = StandardScaler().fit_transform(dbscan_data)
data = pd.DataFrame(data_scaled, columns = dbscan_data.columns)

"""### Bivariate Analysis"""

for first in range(5):
  for second in range(first+1, 5):
    x = data[[features[first], features[second]]].values
    db = DBSCAN(eps=0.5, min_samples=5)
    db.fit(x)
    outliers_in_cols = data[db.labels_==-1].index.to_numpy()
    plt.figure(figsize=(10,6))
    plt.scatter(x[:,0], x[:,1], c=db.labels_)
    plt.scatter(x[outliers_in_cols,0], x[outliers_in_cols,1], c='black', label='Outliers')
    plt.xlabel(features[first])
    plt.ylabel(features[second])
    plt.title(f"Bivariate Analysis of {features[first]} and {features[second]}")
    plt.tight_layout()
    plt.legend()
    plt.show()

    if len(outliers_in_cols) > 0:
      print("\n")
      print(f"Outliers in the bivariate analysis of {features[first]} and {features[second]}:")
      display(data.iloc[outliers_in_cols, [first, second]])
    print("\n")

"""### Trivariate Analysis"""

for first in range(5):
  for second in range(first+1, 5):
    for third in range(second+1, 5):
      x = data[[features[first], features[second], features[third]]].values
      db = DBSCAN(eps=0.5, min_samples=5)
      db.fit(x)
      outliers_in_cols = data[db.labels_==-1].index.to_numpy()
      fig = plt.figure(figsize=(15,8))
      ax = plt.subplot(111, projection='3d')
      ax.scatter(x[:,0], x[:,1], x[:,2], c=db.labels_)
      ax.scatter(x[outliers_in_cols,0], x[outliers_in_cols,1], x[outliers_in_cols,2], c='black', label='Outliers')
      ax.set_xlabel(features[first])
      ax.set_ylabel(features[second])
      ax.set_zlabel(features[third])
      plt.title(f"Trivariate Analysis of {features[first]}, {features[second]}, and {features[third]}")
      plt.tight_layout()
      plt.legend()
      plt.show()

      if len(outliers_in_cols) > 0:
        print("\n")
        print(f"Outliers in the trivariate analysis of {features[first]}, {features[second]}, and {features[third]}:")
        display(data.iloc[outliers_in_cols, [first, second, third]])
      print("\n")

